#!/usr/bin/env python3

import bids
from nilearn import image as nimg
from nilearn import plotting as nplot

# from bids import BIDSValidator
import matplotlib
import matplotlib.pyplot as plt

import numpy as np
import pandas as pd

from nltools.file_reader import onsets_to_dm
from nltools.stats import regress, zscore
from nltools.data import Brain_Data, Design_Matrix
from nltools.stats import find_spikes
from nilearn.plotting import view_img, glass_brain, plot_stat_map

import nibabel as nib

data_dir = "../dataset/ds004791"
# processed_dir = "../dataset/out"
img_dir = "./img"

# =============================================================
# == Loading data
# l = bids.BIDSLayout(data_dir)
l = bids.BIDSLayout(data_dir, derivatives=True, config=["bids", "derivatives"])

test_sub = "0011"
test_task = "matching"
test_run = 1
proc_space = "MNI152NLin2009cAsym"


def play():
    func_data = l.get(
        datatype="func",
        subject=test_sub,
        task=test_task,
        run=test_run,
        desc="preproc",
        extension=".nii.gz",
    )

    # Can use suffix to get events
    events_data = l.get(
        datatype="func", subject=test_sub, task=test_task, run=test_run, suffix="events"
    )[0]

    events_df = events_data.get_df()

    print(events_df.to_string())

    func_img = nimg.load_img(func_data)
    print(func_img.shape)
    # (84, 84, 48, 309)
    # preprocessed: (63, 77, 66, 309)

    func_vol5 = func_img.slicer[:, :, :, 4]
    view = nplot.view_img(func_vol5, threshold=3)
    view.open_in_browser()


play()

def events2dm(l, subj, task, run):
    tr = l.get_tr()
    data_file = l.get(
        scope="raw",
        datatype="func",
        subject=subj,
        task=task,
        run=run,
        suffix="bold",
        extension=".nii.gz",
        return_type="file",
    )[0]
    data = nib.load(data_file)
    n_tr = data.shape[-1]

    events_file = l.get(
        scope="raw",
        datatype="func",
        subject=subj,
        task=task,
        run=run,
        suffix="events",
        extension=".tsv",
    )[0]

    events = events_file.get_df()
    # print(events.columns)
    # ['onset', 'duration', 'trial_type', 'response_time', 'correct', 'left_stim', 'right_stim', 'correct_response']
    dm_design = events[["onset", "duration", "trial_type"]]
    dm_design.columns = ["Onset", "Duration", "Stim"]
    return onsets_to_dm(dm_design, 1 / tr, n_tr)

# =============================================================
# == Data indexing playground

image_dir = "./img/"
test_sub = "0011"
test_task = "matching"
test_run = 1
proc_space = "MNI152NLin2009cAsym"

test_dm = events2dm(l, "0011", "matching", 1)
# print(test_dm.info())

f, a = plt.subplots(figsize=(10, 5))

# Design matrix
test_dm.plot(ax=a)
plt.savefig(image_dir + 'design_mat.png')
plt.close()

# Heatmap
test_dm.heatmap()
plt.savefig(image_dir + 'design_heatmap.png')
plt.close()

# Heatmap after HRFconvolution
test_dm_convolve = test_dm.convolve()
test_dm_convolve.heatmap()
plt.savefig(image_dir + 'design_heatmap_conv.png')
plt.close()
